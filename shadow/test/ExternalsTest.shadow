import shadow:natives;
import shadow:io;

class shadow:test@ExternalsTest
{
	// uses shadow_ToString() to get the Shadow String, then extracts it to a C String and
	// prints it to the console using printf()
	private readonly extern __shadowExternalTest_PrintfToString(ExternalsTest ref) => ();

	// creates a Shadow String from a C String and prints it using Shadow Console
	private readonly extern __shadowExternalTest_CreateString() => ();

	// creates a Pointer which holds the number passed as a parameter for later use
	private readonly extern __shadowExternalTest_InitPointer(int start) => (Pointer);
	// prints the number passed earlier to the console, then calls Shadow code to print the number + offset
	private readonly extern __shadowExternalTest_PrintPointerData(ExternalsTest instance, Pointer ptr) => ();
	
	// prints the string representation of the Class object for ExternalsTest and all primitives
	private readonly extern __shadowExternalTest_PrintClasses(ExternalsTest instance) => ();	
	
	//private readonly extern __shadowExternalTest_ThrowException(Exception e) => ();
	
	immutable Pointer ptr;
	int offset = 1000;
	
	public create()
	{
		ptr = __shadowExternalTest_InitPointer(2500);
	}
	
	public main(String[] args) => ()
	{
		__shadowExternalTest_PrintfToString(this);
		__shadowExternalTest_CreateString();
		__shadowExternalTest_PrintPointerData(this, ptr);
		__shadowExternalTest_PrintClasses(this);
		
		/*try {
			__shadowExternalTest_ThrowException(Exception:create("This is an exception"));
		} catch (Exception e) {
			Console.printLine(e);
		}*/
	}
	
	public readonly toString() => (String)
	{
		return "This is the result from running shadow_ToString(ref) from C!!";
	}
	
	private extern _shadowExternalsTest_PrintNumberWithOffset(int number) => ()
	{
		Console.printLine(number + offset);
	}
	
	/*private extern _shadowExternalTest_ThrowException(Exception e) => ()
	{
		throw e;
	}*/
	
	public destroy
	{
		ptr.free();
	}
}
